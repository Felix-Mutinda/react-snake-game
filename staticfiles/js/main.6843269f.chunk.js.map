{"version":3,"sources":["Fruit.js","Snake.js","Board.js","Controls.js","SnakeGame.js","App.js","index.js"],"names":["Fruit","className","style","width","this","props","fruitDimension","height","top","fruitPosition","left","React","Component","Snake","renderSnakeParts","Board","board","document","querySelector","setBoardPosition","setFruitSnakeDimension","updateFruitPosition","setSnakeHeadPosition","Controls","gameStatus","gamePoints","onClick","handlePlay","handlePause","handleStart","handleArrowButtonClick","SnakeGame","state","boardPosition","right","bottom","snake","direction","position","snakeIsAlive","fruitSnakeDimension","bind","getRandomPosition","updateBoardPosition","moveSnake","handleArrowKeyPress","killSnake","eatFruit","snakeWillDie","addEventListener","window","session","id","speed","setState","slice","snakeHead","getRandomDirection","map","snakePart","index","border","snakePartType","key","boardWidth","boardHeight","dim","rand","Math","round","random","t","n","offsetTop","offsetLeft","offsetWidth","offsetHeight","floor","borderLeftWidth","borderRightWidth","borderTopWidth","borderBottomWidth","currentSnakePart","previousSnakePart","i","length","setInterval","clearInterval","event","code","snakeHeadPosition","push","App","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.6843269f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nclass Fruit extends React.Component {\r\n    render() {\r\n        return (\r\n            <div\r\n                className=\"fruit\"\r\n                style={{\r\n                    width: this.props.fruitDimension,\r\n                    height: this.props.fruitDimension,\r\n                    top: this.props.fruitPosition.top,\r\n                    left: this.props.fruitPosition.left,\r\n                }}\r\n            > \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Fruit;","import React from 'react';\r\n\r\n\r\nclass Snake extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"snake\">\r\n                {this.props.renderSnakeParts()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Snake;","import React from 'react';\r\n\r\nimport Fruit from './Fruit';\r\nimport Snake from './Snake';\r\n\r\n\r\nclass Board extends React.Component {\r\n    componentDidMount() {\r\n        const board = document.querySelector('.board');\r\n        this.props.setBoardPosition(board);\r\n        this.props.setFruitSnakeDimension();\r\n        this.props.updateFruitPosition();\r\n        this.props.setSnakeHeadPosition();\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"board\">\r\n                <Fruit\r\n                    fruitPosition={this.props.fruitPosition}\r\n                    fruitDimension={this.props.fruitDimension}\r\n                />\r\n                <Snake\r\n                    renderSnakeParts={this.props.renderSnakeParts}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Board;","import React from 'react';\r\n\r\n\r\nclass Controls extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"controls\">\r\n                <div className=\"status\">\r\n                    {this.props.gameStatus && <h1>{this.props.gameStatus}</h1>}\r\n                    <h2>Points</h2>\r\n                    <h3>{this.props.gamePoints}</h3>\r\n                </div>\r\n                <div className=\"controls-movement\">\r\n                    <button onClick={this.props.handlePlay}>Play</button>\r\n                    <button onClick={this.props.handlePause}>Pause</button>\r\n                    <button onClick={this.props.handleStart}>Start</button>\r\n                </div>\r\n                <div className=\"controls-direction\">\r\n                    <button className=\"ArrowUp\" onClick={() => this.props.handleArrowButtonClick('ArrowUp')}>></button>\r\n                    <button className=\"ArrowRight\" onClick={() => this.props.handleArrowButtonClick('ArrowRight')}>></button>\r\n                    <button className=\"ArrowDown\" onClick={() => this.props.handleArrowButtonClick('ArrowDown')}>></button>\r\n                    <button className=\"ArrowLeft\" onClick={() => this.props.handleArrowButtonClick('ArrowLeft')}>></button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Controls;","import React from 'react';\r\n\r\nimport Board from './Board';\r\nimport Controls from './Controls';\r\n\r\n\r\nclass SnakeGame extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            fruitPosition: {\r\n                top: null,\r\n                left: null,\r\n            },\r\n            boardPosition: {\r\n                top: null,\r\n                right: null,\r\n                bottom: null,\r\n                left: null,\r\n            },\r\n            snake: [{\r\n                direction: null,\r\n                position: {\r\n                    top: null,\r\n                    left: null,\r\n                },\r\n            }],\r\n            snakeIsAlive: true,\r\n            fruitSnakeDimension: null\r\n        }\r\n\r\n        this.updateFruitPosition = this.updateFruitPosition.bind(this);\r\n        this.getRandomPosition = this.getRandomPosition.bind(this);\r\n        this.setBoardPosition = this.setBoardPosition.bind(this);\r\n        this.updateBoardPosition = this.updateBoardPosition.bind(this);\r\n        this.setSnakeHeadPosition = this.setSnakeHeadPosition.bind(this);\r\n        this.renderSnakeParts = this.renderSnakeParts.bind(this);\r\n        this.moveSnake = this.moveSnake.bind(this);\r\n        this.handlePlay = this.handlePlay.bind(this);\r\n        this.handlePause = this.handlePause.bind(this);\r\n        this.handleStart = this.handleStart.bind(this);\r\n        this.handleArrowKeyPress = this.handleArrowKeyPress.bind(this);\r\n        this.killSnake = this.killSnake.bind(this);\r\n        this.eatFruit = this.eatFruit.bind(this);\r\n        this.snakeWillDie = this.snakeWillDie.bind(this);\r\n        this.setFruitSnakeDimension = this.setFruitSnakeDimension.bind(this);\r\n        this.handleArrowButtonClick = this.handleArrowButtonClick.bind(this);\r\n\r\n        document.addEventListener('keydown', this.handleArrowKeyPress);\r\n        window.addEventListener('resize', this.updateBoardPosition);\r\n        this.session = {\r\n            id: null,\r\n            speed: 300,\r\n        };\r\n    }\r\n\r\n    updateFruitPosition() {\r\n        this.setState((state) => {\r\n            return {\r\n                fruitPosition: this.getRandomPosition(state),\r\n            }\r\n        });\r\n    }\r\n\r\n    setSnakeHeadPosition() {\r\n        this.setState((state) => {\r\n            const snake = state.snake.slice(0, 1);\r\n            const snakeHead = snake[0];\r\n            snakeHead.direction = this.getRandomDirection();\r\n            snakeHead.position = this.getRandomPosition(state);\r\n            return {\r\n                snake,\r\n            }\r\n        });\r\n    }\r\n\r\n    renderSnakeParts() {\r\n        const snake = this.state.snake.map((snakePart, index) => {\r\n            const snakePartType = index === 0 ? 'head' : 'body';\r\n            let border;\r\n            switch (snakePart.direction) {\r\n                case 'top':\r\n                    border = 'borderBottom';\r\n                    break;\r\n                case 'right':\r\n                    border = 'borderLeft';\r\n                    break;\r\n                case 'bottom':\r\n                    border = 'borderTop';\r\n                    break;\r\n                default:\r\n                    border = 'borderRight';\r\n            }\r\n            return (\r\n                <div\r\n                    className={snakePartType}\r\n                    style={{\r\n                        [border]: '1px solid #445500ff',\r\n                        width: this.state.fruitSnakeDimension,\r\n                        height: this.state.fruitSnakeDimension,\r\n                        top: snakePart.position.top,\r\n                        left: snakePart.position.left,\r\n                    }}\r\n                    key={index}\r\n                ></div>\r\n            );\r\n        });\r\n\r\n        return snake;\r\n    }\r\n\r\n    getRandomPosition(state) {\r\n        const boardPosition = state.boardPosition;\r\n        const boardWidth = boardPosition.right - boardPosition.left;\r\n        const boardHeight = boardPosition.bottom - boardPosition.top;\r\n        const dim = state.fruitSnakeDimension;\r\n        const top = boardPosition.top + dim + ((boardHeight % dim) / 2);\r\n        const right = boardPosition.right - 2*dim - ((boardWidth % dim) / 2);\r\n        const bottom = boardPosition.bottom - 2*dim - ((boardHeight % dim) / 2);\r\n        const left = boardPosition.left + dim + ((boardWidth % dim) / 2);\r\n\r\n        let rand = Math.round(Math.random() * bottom);\r\n        while (rand === 0 || (rand % dim) !== 0 || (rand < top)) {\r\n            rand = Math.round(Math.random() * bottom);\r\n        }\r\n        const t = rand + (boardHeight % dim) / 2;\r\n\r\n        rand = Math.round(Math.random() * right);\r\n        while (rand === 0 || (rand % dim) !== 0 || (rand < left)) {\r\n            rand = Math.round(Math.random() * right);\r\n        }\r\n        const l = rand + (boardWidth % dim) / 2;\r\n\r\n        return ({\r\n            top: t,\r\n            left: l\r\n        });\r\n        \r\n    }\r\n    \r\n    getRandomDirection() {\r\n        const n = (Math.round(Math.random() * 10) % 4) + 1;\r\n        return n === 1 ? 'top' : n === 2 ? 'right' : n === 3 ? 'bottom' : 'left';\r\n    }\r\n\r\n    setBoardPosition(board) {\r\n        const boardPosition = {\r\n            top: board.offsetTop,\r\n            right: board.offsetLeft + board.offsetWidth,\r\n            bottom: board.offsetTop + board.offsetHeight,\r\n            left: board.offsetLeft,\r\n        }\r\n        this.setState({boardPosition});\r\n    }\r\n\r\n    updateBoardPosition() {\r\n        let board = document.querySelector('.board');\r\n        this.setBoardPosition(board);\r\n        this.setFruitSnakeDimension();\r\n        this.handleStart();\r\n    } \r\n\r\n    setFruitSnakeDimension() {\r\n        this.setState((state) => {\r\n            const board = document.querySelector('.board');\r\n            const boardPosition = state.boardPosition;\r\n            const boardWidth = boardPosition.right - boardPosition.left;\r\n            const boardHeight = boardPosition.bottom - boardPosition.top;\r\n            let dim;\r\n            if (boardWidth <= 425) {\r\n                dim = Math.floor(0.05 * boardWidth);\r\n            } else {\r\n                dim = Math.floor(0.025 * boardWidth);\r\n            }\r\n            board.style.borderLeftWidth = board.style.borderRightWidth = dim + (boardWidth % dim) / 2 + 'px';\r\n            board.style.borderTopWidth = board.style.borderBottomWidth = dim + (boardHeight % dim) / 2 + 'px';\r\n            return {\r\n                fruitSnakeDimension: dim\r\n            }\r\n        });\r\n    }\r\n\r\n    moveSnake() {\r\n        const fruitPosition = this.state.fruitPosition;\r\n        const snake = this.state.snake.slice();\r\n        const snakeHead = snake[0];\r\n        let currentSnakePart, previousSnakePart;\r\n        currentSnakePart = {\r\n            direction: snakeHead.direction,\r\n            position: {\r\n                top: snakeHead.position.top,\r\n                left: snakeHead.position.left,\r\n            },\r\n        }\r\n        const dim = this.state.fruitSnakeDimension;\r\n        switch (snakeHead.direction) {\r\n            case 'top':\r\n                currentSnakePart.position.top -= dim;\r\n                break;\r\n            case 'right':\r\n                currentSnakePart.position.left += dim;\r\n                break;\r\n            case 'bottom':\r\n                currentSnakePart.position.top += dim;\r\n                break;\r\n            default:\r\n                currentSnakePart.position.left -= dim;\r\n                break;\r\n        }\r\n        if (this.snakeWillDie(currentSnakePart.position)) {\r\n                this.killSnake();\r\n                return;\r\n            }\r\n        if (currentSnakePart.position.top === fruitPosition.top && currentSnakePart.position.left === fruitPosition.left) {\r\n            this.eatFruit(snake);\r\n        }\r\n        for (let i = 0; i < snake.length; i++) {\r\n            previousSnakePart = snake[i];\r\n            snake[i] = currentSnakePart;\r\n            currentSnakePart= previousSnakePart;\r\n        }\r\n        this.setState({snake});\r\n    }\r\n\r\n    handlePlay() {\r\n        if (this.session.id === null) {\r\n            this.session.id = setInterval(this.moveSnake, this.session.speed);\r\n        }\r\n    }\r\n\r\n    handlePause() {\r\n        clearInterval(this.session.id);\r\n        this.session.id = null;\r\n    }\r\n\r\n    handleStart() {\r\n        this.handlePause();\r\n        this.setSnakeHeadPosition();\r\n        this.updateFruitPosition();\r\n        this.session.speed = 300;\r\n        this.handlePlay();\r\n        this.setState({snakeIsAlive: true});\r\n    }\r\n\r\n    handleArrowKeyPress(event) {\r\n        const snake = this.state.snake.slice();\r\n        const snakeHead = snake[0];\r\n        let direction = snakeHead.direction;\r\n        if (!this.state.snakeIsAlive || this.session.id === null) {\r\n            return;\r\n        }\r\n        switch (event.code) {\r\n            case 'ArrowUp':\r\n                if (direction === 'bottom')\r\n                    break;\r\n                direction = 'top';\r\n                break;\r\n            case 'ArrowRight':\r\n                if (direction === 'left')\r\n                    break;\r\n                direction = 'right';\r\n                break;\r\n            case 'ArrowDown':\r\n                if (direction === 'top')\r\n                    break;\r\n                direction = 'bottom';\r\n                break;\r\n            case 'ArrowLeft':\r\n                if (direction === 'right')\r\n                    break\r\n                direction = 'left';\r\n                break;\r\n            default:\r\n                ;\r\n        }\r\n        snakeHead.direction = direction;\r\n        this.setState({\r\n            snake,\r\n        });\r\n    }\r\n\r\n    killSnake() {\r\n        this.setState({\r\n            snakeIsAlive: false,\r\n        });\r\n        this.handlePause();\r\n\r\n    }\r\n\r\n    snakeWillDie(snakeHeadPosition) {\r\n        const boardPosition = this.state.boardPosition;\r\n        const boardWidth = boardPosition.right - boardPosition.left;\r\n        const boardHeight = boardPosition.bottom - boardPosition.top;\r\n        const dim = this.state.fruitSnakeDimension;\r\n        const top = boardPosition.top + dim + ((boardHeight % dim) / 2);\r\n        const right = boardPosition.right - 2*dim - ((boardWidth % dim) / 2);\r\n        const bottom = boardPosition.bottom - 2*dim - ((boardHeight % dim) / 2);\r\n        const left = boardPosition.left + dim + ((boardWidth % dim) / 2);\r\n\r\n        if (snakeHeadPosition.top < top || snakeHeadPosition.top > bottom\r\n            || snakeHeadPosition.left < left || snakeHeadPosition.left > right) {\r\n                return true;\r\n            }\r\n        const snake = this.state.snake;\r\n        let snakePart;\r\n        for (let i = 1; i < snake.length; i++) {\r\n            snakePart = snake[i];\r\n            if (snakeHeadPosition.top === snakePart.position.top && snakeHeadPosition.left === snakePart.position.left) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    eatFruit(snake) {\r\n        snake.push({\r\n            direction: null,\r\n            position: {\r\n                top: null,\r\n                left: null,\r\n            }\r\n        });\r\n        this.updateFruitPosition();\r\n        if (this.session.speed > 100) {\r\n            if ((this.state.boardPosition.right - this.state.boardPosition.left) > 425) {\r\n                this.session.speed -= 100;\r\n            } else {\r\n                this.session.speed -= 50;\r\n            }\r\n        }\r\n        this.handlePause();\r\n        this.handlePlay();\r\n    }\r\n\r\n    handleArrowButtonClick(code) {\r\n        const event = {\r\n            code\r\n        }\r\n        this.handleArrowKeyPress(event)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"snakegame\">\r\n                <Board \r\n                    setBoardPosition={this.setBoardPosition}\r\n                    fruitPosition={this.state.fruitPosition}\r\n                    fruitDimension={this.state.fruitSnakeDimension}\r\n                    updateFruitPosition={this.updateFruitPosition}\r\n                    setSnakeHeadPosition={this.setSnakeHeadPosition}\r\n                    renderSnakeParts={this.renderSnakeParts}\r\n                    setFruitSnakeDimension={this.setFruitSnakeDimension}\r\n                />\r\n                <Controls\r\n                    handlePlay={this.handlePlay}\r\n                    handlePause={this.handlePause}\r\n                    handleStart={this.handleStart}\r\n                    handleArrowButtonClick={this.handleArrowButtonClick}\r\n                    gameStatus={this.state.snakeIsAlive ? null : 'Game Over!'}\r\n                    gamePoints={(this.state.snake.length - 1) * this.state.fruitSnakeDimension}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SnakeGame;","import React from 'react';\r\n\r\nimport SnakeGame from './SnakeGame';\r\n\r\nimport './css/style.css';\r\n\r\n\r\nfunction App(props) {\r\n    return (\r\n        <SnakeGame />\r\n    );\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './App';\r\n\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}