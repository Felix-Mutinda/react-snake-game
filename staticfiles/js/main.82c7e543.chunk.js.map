{"version":3,"sources":["Fruit.js","Snake.js","Board.js","Status.js","SnakeGame.js","App.js","index.js"],"names":["Fruit","className","style","this","props","fruitPosition","React","Component","Snake","renderSnakeParts","Board","board","document","getElementsByClassName","setBoardPosition","top","offsetTop","right","offsetLeft","offsetWidth","bottom","offsetHeight","left","updateFruitPosition","setSnakeHeadPosition","Status","gameStatus","gamePoints","onClick","handlePlay","handlePause","handleStart","SnakeGame","state","boardPosition","snake","direction","position","snakeIsAlive","bind","getRandomPosition","moveSnake","handleArrowKeyPress","killSnake","eatFruit","snakeWillDie","onkeydown","session","id","speed","setState","slice","snakeHead","getRandomDirection","map","snakePart","index","border","snakePartType","key","currentState","rand","Math","round","random","n","pos","currentSnakePart","previousSnakePart","i","length","setInterval","clearInterval","event","code","snakeHeadPosition","push","App","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.82c7e543.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './css/Fruit.css';\r\n\r\n\r\nclass Fruit extends React.Component {\r\n    render() {\r\n        return (\r\n            <div\r\n                className=\"Fruit\"\r\n                style={this.props.fruitPosition}\r\n            > \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Fruit;","import React from 'react';\r\n\r\nimport './css/Snake.css';\r\n\r\n\r\nclass Snake extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"Snake\">\r\n                {this.props.renderSnakeParts()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Snake;","import React from 'react';\r\n\r\nimport Fruit from './Fruit';\r\nimport Snake from './Snake';\r\n\r\nimport './css/Board.css';\r\n\r\nclass Board extends React.Component {\r\n    componentDidMount() {\r\n        const board = document.getElementsByClassName('Board')[0];\r\n        this.props.setBoardPosition({\r\n            top: board.offsetTop + 20,\r\n            right: board.offsetLeft + board.offsetWidth - 40,\r\n            bottom: board.offsetTop + board.offsetHeight - 40,\r\n            left: board.offsetLeft + 20,\r\n        });\r\n        this.props.updateFruitPosition();\r\n        this.props.setSnakeHeadPosition();\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"Board\">\r\n                <Fruit\r\n                    fruitPosition={this.props.fruitPosition}\r\n                />\r\n                <Snake\r\n                    renderSnakeParts={this.props.renderSnakeParts}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Board;","import React from 'react';\r\n\r\nimport './css/Status.css';\r\n\r\n\r\nclass Status extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"Status\">\r\n                {this.props.gameStatus}\r\n                <div className=\"Status-info\">\r\n                    <div className=\"Status-info--title\">Points</div>\r\n                    <div className=\"Status-info--text\">{this.props.gamePoints}</div>\r\n                </div>\r\n                <div className=\"Status-controls\">\r\n                    <button onClick={this.props.handlePlay}>Play</button>\r\n                    <button onClick={this.props.handlePause}>Pause</button>\r\n                    <button onClick={this.props.handleStart}>Start</button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Status;","import React from 'react';\r\n\r\nimport Board from './Board';\r\nimport Status from './Status';\r\n\r\nimport './css/SnakeGame.css';\r\n\r\nclass SnakeGame extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            fruitPosition: {\r\n                top: null,\r\n                left: null,\r\n            },\r\n            boardPosition: {\r\n                top: null,\r\n                right: null,\r\n                bottom: null,\r\n                left: null,\r\n            },\r\n            snake: [{\r\n                direction: null,\r\n                position: {\r\n                    top: null,\r\n                    left: null,\r\n                },\r\n            }],\r\n            snakeIsAlive: true,\r\n        }\r\n\r\n        this.updateFruitPosition = this.updateFruitPosition.bind(this);\r\n        this.getRandomPosition = this.getRandomPosition.bind(this);\r\n        this.setBoardPosition = this.setBoardPosition.bind(this);\r\n        this.setSnakeHeadPosition = this.setSnakeHeadPosition.bind(this);\r\n        this.renderSnakeParts = this.renderSnakeParts.bind(this);\r\n        this.moveSnake = this.moveSnake.bind(this);\r\n        this.handlePlay = this.handlePlay.bind(this);\r\n        this.handlePause = this.handlePause.bind(this);\r\n        this.handleStart = this.handleStart.bind(this);\r\n        this.handleArrowKeyPress = this.handleArrowKeyPress.bind(this);\r\n        this.killSnake = this.killSnake.bind(this);\r\n        this.eatFruit = this.eatFruit.bind(this);\r\n        this.snakeWillDie = this.snakeWillDie.bind(this);\r\n\r\n        document.onkeydown = this.handleArrowKeyPress;\r\n        this.session = {\r\n            id: null,\r\n            speed: 500,\r\n        };\r\n    }\r\n\r\n    updateFruitPosition() {\r\n        this.setState((state) => {\r\n            return {\r\n                fruitPosition: this.getRandomPosition(state),\r\n            }\r\n        });\r\n    }\r\n\r\n    setSnakeHeadPosition() {\r\n        this.setState((state) => {\r\n            const snake = state.snake.slice(0, 1);\r\n            const snakeHead = snake[0];\r\n            snakeHead.direction = this.getRandomDirection();\r\n            snakeHead.position = this.getRandomPosition(state);\r\n            return {\r\n                snake,\r\n            }\r\n        });\r\n    }\r\n\r\n    renderSnakeParts() {\r\n        const snake = this.state.snake.map((snakePart, index) => {\r\n            const snakePartType = index === 0 ? 'head' : 'body';\r\n            let border;\r\n            switch (snakePart.direction) {\r\n                case 'top':\r\n                    border = 'borderBottom';\r\n                    break;\r\n                case 'right':\r\n                    border = 'borderLeft';\r\n                    break;\r\n                case 'bottom':\r\n                    border = 'borderTop';\r\n                    break;\r\n                default:\r\n                    border = 'borderRight';\r\n            }\r\n            return (\r\n                <div\r\n                    className={'Snake-' + snakePartType}\r\n                    style={{\r\n                        [border]: '1px solid rgba(247, 243, 6, 0.986)',\r\n                        top: snakePart.position.top,\r\n                        left: snakePart.position.left,\r\n                    }}\r\n                    key={index}\r\n                ></div>\r\n            );\r\n        });\r\n\r\n        return snake;\r\n    }\r\n\r\n    getRandomPosition(currentState) {\r\n        let top, left;\r\n        let boardPosition = currentState.boardPosition;\r\n        \r\n        let rand = Math.round(Math.random() * boardPosition.bottom);\r\n        while (rand === 0 || (rand % 20) !== 0 || (rand < boardPosition.top)) {\r\n            rand = Math.round(Math.random() * boardPosition.bottom);\r\n        }\r\n        top = rand;\r\n\r\n        rand = Math.round(Math.random() * boardPosition.right);\r\n        while (rand === 0 || (rand % 20) !== 0 || (rand < boardPosition.left)) {\r\n            rand = Math.round(Math.random() * boardPosition.right);\r\n        }\r\n        left = rand;\r\n\r\n        return ({\r\n            top,\r\n            left\r\n        });\r\n        \r\n    }\r\n    \r\n    getRandomDirection() {\r\n        const n = (Math.round(Math.random() * 10) % 4) + 1;\r\n        return n === 1 ? 'top' : n === 2 ? 'right' : n === 3 ? 'bottom' : 'left';\r\n    }\r\n\r\n    setBoardPosition(pos) {\r\n        this.setState({boardPosition: pos});\r\n    }\r\n\r\n    moveSnake() {\r\n        const fruitPosition = this.state.fruitPosition;\r\n        const snake = this.state.snake.slice();\r\n        const snakeHead = snake[0];\r\n        let currentSnakePart, previousSnakePart;\r\n        currentSnakePart = {\r\n            direction: snakeHead.direction,\r\n            position: {\r\n                top: snakeHead.position.top,\r\n                left: snakeHead.position.left,\r\n            },\r\n        }\r\n        switch (snakeHead.direction) {\r\n            case 'top':\r\n                currentSnakePart.position.top -= 20;\r\n                break;\r\n            case 'right':\r\n                currentSnakePart.position.left += 20;\r\n                break;\r\n            case 'bottom':\r\n                currentSnakePart.position.top += 20;\r\n                break;\r\n            default:\r\n                currentSnakePart.position.left -= 20;\r\n                break;\r\n        }\r\n        if (this.snakeWillDie(currentSnakePart.position)) {\r\n                this.killSnake();\r\n                return;\r\n            }\r\n        if (currentSnakePart.position.top === fruitPosition.top && currentSnakePart.position.left === fruitPosition.left) {\r\n            this.eatFruit(snake);\r\n        }\r\n        for (let i = 0; i < snake.length; i++) {\r\n            previousSnakePart = snake[i];\r\n            snake[i] = currentSnakePart;\r\n            currentSnakePart= previousSnakePart;\r\n        }\r\n        this.setState({snake});\r\n    }\r\n\r\n    handlePlay() {\r\n        if (this.session.id === null) {\r\n            this.session.id = setInterval(this.moveSnake, this.session.speed);\r\n        }\r\n    }\r\n\r\n    handlePause() {\r\n        clearInterval(this.session.id);\r\n        this.session.id = null;\r\n    }\r\n\r\n    handleStart() {\r\n        this.handlePause();\r\n        this.setSnakeHeadPosition();\r\n        this.updateFruitPosition();\r\n        this.session.speed = 500;\r\n        this.handlePlay();\r\n        this.setState({snakeIsAlive: true});\r\n    }\r\n\r\n    handleArrowKeyPress(event) {\r\n        const snake = this.state.snake.slice();\r\n        const snakeHead = snake[0];\r\n        let direction = snakeHead.direction;\r\n        if (!this.state.snakeIsAlive || this.session.id === null) {\r\n            return;\r\n        }\r\n        switch (event.code) {\r\n            case 'ArrowUp':\r\n                if (direction === 'bottom')\r\n                    break;\r\n                direction = 'top';\r\n                break;\r\n            case 'ArrowRight':\r\n                if (direction === 'left')\r\n                    break;\r\n                direction = 'right';\r\n                break;\r\n            case 'ArrowDown':\r\n                if (direction === 'top')\r\n                    break;\r\n                direction = 'bottom';\r\n                break;\r\n            case 'ArrowLeft':\r\n                if (direction === 'right')\r\n                    break\r\n                direction = 'left';\r\n                break;\r\n            default:\r\n                ;\r\n        }\r\n        snakeHead.direction = direction;\r\n        this.setState({\r\n            snake,\r\n        });\r\n    }\r\n\r\n    killSnake() {\r\n        this.setState({\r\n            snakeIsAlive: false,\r\n        });\r\n        this.handlePause();\r\n\r\n    }\r\n\r\n    snakeWillDie(snakeHeadPosition) {\r\n        const boardPosition = this.state.boardPosition;\r\n        const snake = this.state.snake;\r\n        if (snakeHeadPosition.top < boardPosition.top || snakeHeadPosition.top > boardPosition.bottom\r\n            || snakeHeadPosition.left < boardPosition.left || snakeHeadPosition.left > boardPosition.right) {\r\n                return true;\r\n            }\r\n        let snakePart;\r\n        for (let i = 1; i < snake.length; i++) {\r\n            snakePart = snake[i];\r\n            if (snakeHeadPosition.top === snakePart.position.top && snakeHeadPosition.left === snakePart.position.left) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    eatFruit(snake) {\r\n        snake.push({\r\n            direction: null,\r\n            position: {\r\n                top: null,\r\n                left: null,\r\n            }\r\n        });\r\n        this.updateFruitPosition();\r\n        if (this.session.speed > 100) {\r\n            this.session.speed -= 50;\r\n        }\r\n        this.handlePause();\r\n        this.handlePlay();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"SnakeGame\">\r\n                <Board \r\n                    setBoardPosition={this.setBoardPosition}\r\n                    fruitPosition={this.state.fruitPosition}\r\n                    updateFruitPosition={this.updateFruitPosition}\r\n                    setSnakeHeadPosition={this.setSnakeHeadPosition}\r\n                    renderSnakeParts={this.renderSnakeParts}\r\n                />\r\n                <Status\r\n                    handlePlay={this.handlePlay}\r\n                    handlePause={this.handlePause}\r\n                    handleStart={this.handleStart}\r\n                    gameStatus={this.state.snakeIsAlive ? '' : 'Game Over!'}\r\n                    gamePoints={(this.state.snake.length - 1) * 20}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SnakeGame;","import React from 'react';\r\n\r\nimport SnakeGame from './SnakeGame';\r\n\r\nimport './css/App.css';\r\n\r\n\r\nfunction App(props) {\r\n    return (\r\n        <SnakeGame />\r\n    );\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './App';\r\n\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}